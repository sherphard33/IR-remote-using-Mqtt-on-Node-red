//Phoenixaiden MagicianGirl33 28/03/2019
#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#ifndef UNIT_TEST
#include <Arduino.h>
#endif
#include <IRremoteESP8266.h>
#include <IRsend.h>   
#define LED_PIN 2
int t = 5;
int t1 = 4;
int swingSp = 0;

// network credentials
const char* ssid = "WIFI"; //Your WI-FI SSID
const char* password = "password";//Your Wi-Fi password

//MQTT server IP address
const char* mqtt_server = "192.168.1.134";

WiFiClient irClient;
PubSubClient client(irClient);

const uint16_t kIrLed = 4;
IRsend irsend(kIrLed);
uint16_t temp16[205] = {152, 6674,  124, 19476,  126, 24706,  6100, 7430,  498, 1672,  528, 1674,  518, 1672,  526, 1630,  566, 1670,  524, 1632,  570, 1626,  566, 1632,  564, 566,  566, 612,  522, 610,  498, 638,  554, 554,  520, 568,  534, 600,  560, 610,  500, 1666,  504, 1690,  534, 1662,  534, 1668,  530, 1726,  470, 1658,  534, 1702,  496, 1658,  542, 636,  492, 572,  562, 570,  534, 598,  560, 580,  532, 634,  504, 600,  530, 606,  522, 572,  560, 62,  58, 450,  560, 1700,  494, 1648,  548, 1702,  446, 1724,  524, 1634,  564, 1674,  468, 1688,  538, 1656,  540, 642,  494, 636,  494, 612,  516, 572,  534, 606,  556, 614,  496, 1698,  504, 692,  440, 1654,  542, 676,  456, 1676,  520, 568,  534, 600,  560, 1634,  562, 574,  536, 1704,  490, 640,  500, 1660,  538, 594,  538, 1752,  442, 1690,  506, 602,  498, 1660,  564, 1634,  568, 1628,  570, 1626,  568, 1630,  562, 572,  566, 1630,  564, 1632,  564, 574,  508, 664,  500, 690,  444, 604,  528, 562,  536, 1660,  536, 600,  558, 616,  466, 668,  500, 1654,  538, 632,  500, 1694,  502, 564,  570, 1664,  532, 562,  566, 614,  518, 1634,  556, 580,  536, 1656,  540, 632,  500, 1702,  494, 608,  526, 1628,  568, 1696,  500, 7412,  542};  // UNKNOWN 44AEA51D
uint16_t temp18[199] = {124, 47618,  6054, 7402,  526, 1634,  564, 1632,  566, 1630,  564, 1630,  568, 1628,  568, 1630,  536, 1660,  536, 1640,  556, 598,  514, 626,  534, 600,  532, 596,  538, 566,  564, 570,  512, 622,  562, 572,  540, 1698,  496, 1702,  494, 1660,  538, 1668,  532, 1700,  492, 1666,  532, 1702,  494, 1706,  490, 612,  524, 570,  532, 600,  508, 662,  524, 616,  492, 598,  536, 606,  522, 570,  534, 1660,  536, 598,  566, 1630,  568, 1628,  568, 1628,  568, 1636,  560, 1634,  558, 1636,  560, 616,  496, 1704,  492, 596,  540, 610,  518, 570,  536, 596,  566, 610,  518, 572,  540, 1700,  498, 638,  492, 1704,  492, 570,  562, 1634,  564, 570,  512, 622,  566, 1634,  558, 610,  500, 1702,  492, 640,  494, 1696,  504, 564,  566, 1612,  580, 1672,  524, 574,  530, 1662,  534, 606,  560, 1630,  566, 1632,  564, 1634,  560, 614,  496, 1662,  534, 1700,  498, 634,  498, 1708,  488, 570,  564, 566,  534, 600,  512, 1686,  508, 624,  538, 640,  492, 640,  494, 1702,  492, 570,  566, 1630,  564, 570,  512, 1684,  512, 670,  516, 608,  498, 1664,  532, 594,  540, 1706,  492, 610,  520, 1636,  560, 568,  536, 1660,  536, 1660,  534, 7406,  552};  // UNKNOWN FF55EEBB
uint16_t temp20[197] = {6000, 7406,  526, 1672,  494, 1662,  562, 1634,  562, 1636,  514, 1684,  514, 1684,  514, 1684,  514, 1684,  512, 626,  562, 568,  538, 594,  536, 572,  562, 568,  534, 646,  464, 630,  532, 600,  532, 1704,  492, 1704,  494, 1664,  532, 1702,  494, 1664,  536, 1698,  498, 1656,  540, 1698,  498, 608,  526, 566,  512, 622,  512, 626,  536, 634,  498, 610,  520, 570,  536, 596,  514, 1684,  512, 630,  560, 1634,  558, 1676,  520, 1638,  558, 1634,  566, 1632,  562, 1642,  530, 602,  532, 1704,  494, 616,  520, 568,  532, 602,  508, 660,  524, 576,  532, 598,  534, 1706,  494, 566,  566, 1630,  564, 568,  512, 1684,  514, 618,  566, 616,  490, 1664,  558, 616,  494, 1698,  496, 570,  566, 1670,  524, 568,  536, 1658,  536, 1660,  534, 600,  562, 1634,  512, 1730,  514, 614,  524, 1632,  564, 1640,  536, 710,  422, 1704,  490, 1664,  534, 610,  526, 566,  536, 1660,  536, 598,  512, 638,  544, 1638,  560, 568,  538, 638,  496, 570,  534, 1658,  562, 578,  508, 1682,  512, 698,  492, 1634,  554, 614,  498, 636,  496, 1776,  420, 574,  560, 1676,  520, 570,  534, 1662,  536, 606,  502, 1686,  566, 1636,  560, 7364,  512};  // UNKNOWN E1A8B66F
uint16_t temp22[199] = {6036, 7430,  506, 1766,  432, 1700,  494, 1700,  498, 1704,  494, 1634,  568, 1610,  582, 1634,  534, 1664,  534, 606,  558, 616,  494, 636,  498, 610,  496, 598,  510, 668,  518, 604,  506, 572,  558, 1676,  524, 1634,  564, 1632,  538, 1660,  538, 1660,  514, 1686,  514, 1684,  570, 1628,  566, 612,  496, 636,  496, 570,  564, 570,  512, 622,  538, 644,  494, 636,  494, 572,  530, 1642,  558, 598,  566, 1634,  562, 1680,  492, 1664,  534, 1662,  536, 1662,  538, 1704,  494, 608,  524, 1632,  564, 574,  508, 622,  566, 574,  532, 640,  492, 572,  562, 570,  514, 1720,  530, 660,  468, 1638,  540, 602,  532, 1698,  500, 568,  562, 572,  512, 1684,  514, 738,  422, 1662,  534, 642,  494, 1702,  492, 570,  558, 1638,  564, 1634,  514, 622,  564, 1642,  554, 572,  540, 712,  424, 1670,  524, 1674,  526, 566,  512, 1684,  514, 1686,  512, 626,  536, 1702,  494, 1776,  422, 594,  538, 568,  564, 1636,  536, 596,  554, 588,  532, 638,  494, 1666,  532, 568,  564, 1672,  524, 570,  512, 1690,  506, 624,  542, 634,  498, 1698,  502, 608,  524, 1630,  568, 544,  534, 1686,  514, 626,  556, 1644,  530, 1778,  422, 7418,  562, 7890,  128};  // UNKNOWN A685D8E1
uint16_t temp23[197] = {6142, 7392,  544, 1662,  512, 1778,  394, 1702,  540, 1662,  514, 1736,  464, 1780,  370, 1678,  556, 1734,  466, 716,  368, 658,  512, 710,  398, 632,  538, 598,  512, 710,  370, 614,  552, 670,  470, 1740,  406, 1724,  508, 1694,  512, 1778,  398, 1808,  370, 1678,  556, 1738,  466, 1778,  372, 616,  548, 674,  462, 716,  368, 618,  552, 710,  394, 746,  400, 626,  514, 710,  370, 1726,  538, 1664,  508, 1748,  424, 1810,  424, 1670,  510, 1736,  468, 1776,  372, 1722,  538, 646,  462, 714,  370, 656,  508, 672,  466, 714,  372, 654,  510, 674,  436, 742,  426, 1666,  514, 708,  394, 638,  534, 1662,  510, 1738,  466, 1782,  370, 1724,  508, 1692,  510, 712,  392, 1702,  534, 1666,  510, 676,  434, 632,  536, 598,  508, 564,  546, 632,  532, 604,  510, 712,  370, 660,  538, 1662,  512, 1776,  398, 742,  366, 1724,  512, 1738,  468, 1776,  368, 1800,  464, 1662,  510, 630,  502, 720,  422, 1626,  552, 672,  462, 716,  416, 608,  510, 1738,  436, 744,  424, 1666,  514, 710,  420, 1784,  368, 658,  510, 714,  422, 1784,  366, 658,  510, 1740,  468, 712,  366, 1724,  508, 674,  466, 1762,  384, 1724,  514, 7432,  496};  // UNKNOWN 7F5988EF
uint16_t temp24[207] = {126, 2436,  62, 7048,  6130, 7368,  568, 1672,  528, 1630,  540, 1702,  498, 1706,  494, 1708,  490, 1700,  502, 1628,  564, 1634,  536, 598,  570, 568,  538, 644,  488, 570,  562, 570,  570, 564,  540, 598,  536, 614,  522, 1674,  496, 1662,  512, 1686,  512, 1690,  560, 1640,  558, 1676,  502, 1662,  534, 1700,  498, 612,  522, 570,  512, 624,  566, 612,  494, 570,  562, 568,  534, 608,  562, 568,  540, 638,  492, 570,  534, 1664,  534, 1664,  514, 1686,  568, 1628,  570, 1636,  534, 1656,  542, 1702,  496, 1666,  532, 612,  524, 566,  514, 698,  490, 576,  530, 614,  522, 566,  512, 1686,  514, 620,  542, 1698,  498, 526,  610, 1634,  564, 568,  512, 622,  566, 1672,  526, 612,  498, 1700,  496, 572,  562, 1632,  538, 598,  570, 1634,  560, 1666,  506, 638,  496, 1666,  532, 1674,  526, 1672,  522, 570,  512, 1690,  508, 626,  538, 1666,  532, 1664,  534, 568,  566, 566,  514, 722,  466, 1636,  560, 620,  492, 1656,  538, 570,  568, 568,  512, 626,  558, 1640,  538, 596,  534, 1676,  522, 570,  532, 1664,  512, 632,  560, 646,  460, 1666,  532, 610,  524, 1674,  494, 604,  508, 1764,  434, 630,  530, 1666,  532, 1666,  532, 7462,  502, 7870,  128, 18204,  126, 8980,  58};  // UNKNOWN 3AC6C93
uint16_t temp25[197] = {6032, 7420,  486, 1720,  456, 1722,  514, 1688,  512, 1692,  458, 1746,  484, 1654,  552, 1628,  544, 1720,  458, 614,  554, 624,  484, 652,  458, 614,  552, 628,  478, 664,  508, 596,  512, 626,  456, 1684,  580, 1620,  556, 1690,  510, 1694,  456, 1680,  554, 1774,  426, 1696,  454, 1686,  548, 626,  514, 628,  452, 660,  508, 630,  510, 626,  458, 612,  556, 624,  482, 654,  514, 556,  554, 624,  462, 1828,  370, 1682,  554, 1734,  470, 1776,  372, 1720,  510, 1650,  554, 1692,  484, 1718,  516, 598,  510, 626,  458, 678,  518, 554,  552, 628,  456, 616,  552, 1648,  554, 628,  454, 662,  508, 1690,  512, 1692,  482, 1660,  578, 1618,  556, 1688,  510, 626,  460, 1676,  556, 1690,  514, 622,  460, 612,  554, 624,  512, 626,  510, 562,  552, 624,  512, 1692,  454, 1722,  510, 628,  512, 1690,  458, 656,  510, 1690,  514, 1690,  458, 1750,  510, 558,  552, 626,  484, 1718,  460, 612,  552, 1696,  506, 628,  456, 614,  552, 626,  482, 1722,  456, 614,  554, 1690,  512, 628,  456, 1722,  512, 624,  512, 628,  454, 1682,  576, 600,  512, 1692,  456, 614,  552, 1690,  514, 624,  456, 1744,  516, 1620,  554, 7404,  556};  // UNKNOWN DD10F2D
uint16_t temp26[199] = {126, 12936,  6110, 7368,  570, 1632,  560, 1636,  540, 1702,  496, 1692,  508, 1702,  496, 1634,  564, 1672,  494, 1662,  564, 570,  512, 628,  534, 636,  498, 572,  534, 596,  514, 622,  542, 636,  496, 570,  568, 1612,  582, 1634,  534, 1666,  514, 1684,  514, 1692,  562, 1628,  566, 1640,  534, 1708,  492, 642,  494, 566,  536, 602,  562, 572,  536, 636,  500, 568,  534, 598,  568, 566,  540, 1658,  542, 696,  438, 1676,  520, 1680,  520, 1632,  536, 1662,  536, 1666,  512, 1686,  566, 572,  534, 1702,  494, 640,  492, 570,  514, 622,  566, 614,  492, 640,  492, 572,  560, 1634,  536, 602,  566, 1638,  562, 574,  530, 1706,  494, 612,  518, 570,  512, 1686,  514, 668,  496, 1664,  532, 636,  496, 1660,  542, 566,  538, 1660,  514, 1686,  564, 572,  542, 1662,  538, 608,  524, 1654,  544, 570,  512, 1692,  508, 632,  532, 1658,  536, 1702,  498, 570,  560, 1634,  538, 622,  544, 1710,  490, 570,  536, 1662,  536, 568,  562, 572,  512, 666,  496, 1738,  460, 640,  496, 1678,  524, 568,  510, 1694,  504, 628,  536, 640,  494, 1700,  500, 568,  536, 1662,  512, 630,  534, 1668,  530, 640,  496, 1674,  526, 1630,  562, 7466,  500};  // UNKNOWN 2D8C10FF
uint16_t temp28[197] = {6040, 7390,  544, 1704,  492, 1708,  488, 1698,  502, 1670,  528, 1632,  564, 1630,  570, 1630,  536, 1640,  534, 670,  516, 612,  496, 640,  494, 572,  532, 646,  516, 618,  494, 640,  494, 610,  526, 1630,  538, 1660,  536, 1662,  512, 1694,  506, 1732,  522, 1630,  570, 1634,  534, 1662,  536, 636,  496, 610,  496, 596,  512, 666,  496, 714,  422, 638,  494, 570,  512, 624,  568, 684,  420, 614,  520, 1682,  518, 1672,  526, 1632,  562, 1636,  514, 1686,  512, 1684,  570, 1630,  566, 1636,  564, 570,  536, 642,  494, 566,  562, 578,  506, 630,  552, 612,  500, 1702,  496, 610,  522, 1674,  520, 572,  514, 1684,  514, 646,  514, 644,  490, 1664,  532, 572,  536, 1660,  560, 580,  508, 1762,  492, 572,  532, 1672,  528, 1666,  530, 612,  526, 1632,  534, 1662,  536, 606,  502, 626,  538, 1666,  530, 644,  488, 1676,  526, 1674,  524, 568,  512, 626,  556, 1682,  494, 1664,  534, 614,  518, 1676,  522, 568,  514, 624,  566, 574,  532, 1666,  532, 634,  496, 1678,  522, 568,  534, 1662,  514, 622,  564, 574,  538, 1656,  540, 614,  520, 1632,  570, 564,  512, 1686,  514, 628,  532, 1660,  538, 1706,  494, 7426,  536};  // UNKNOWN 7646450
uint16_t temp30[197] = {6084, 7392,  540, 1672,  526, 1676,  524, 1632,  536, 1662,  514, 1686,  570, 1630,  566, 1712,  462, 1702,  496, 612,  524, 570,  510, 626,  568, 572,  532, 600,  538, 566,  532, 608,  560, 570,  538, 1662,  534, 1702,  498, 1676,  524, 1674,  524, 1672,  496, 1660,  514, 1684,  514, 1686,  514, 624,  538, 598,  532, 570,  536, 598,  512, 660,  500, 620,  514, 572,  566, 568,  512, 662,  500, 1698,  498, 1662,  540, 1658,  538, 1666,  534, 1692,  504, 1674,  526, 1670,  522, 1636,  562, 572,  570, 574,  528, 636,  500, 608,  522, 572,  512, 686,  498, 580,  534, 1698,  498, 610,  522, 1634,  536, 600,  566, 1638,  562, 572,  534, 634,  500, 1670,  528, 570,  512, 1684,  512, 622,  542, 1658,  540, 636,  496, 1676,  526, 1670,  524, 570,  514, 630,  560, 1634,  536, 1664,  532, 640,  496, 1700,  496, 1636,  558, 570,  514, 1684,  514, 1684,  514, 622,  562, 598,  512, 1702,  494, 570,  538, 598,  566, 1634,  566, 644,  462, 640,  494, 1674,  524, 570,  512, 1684,  516, 670,  516, 1680,  494, 636,  496, 612,  524, 1670,  496, 598,  512, 1686,  570, 562,  544, 1658,  536, 614,  520, 1676,  522, 1632,  568, 7462,  494};  // UNKNOWN B5D57AA1
uint16_t temp32[197] = {6084, 7408,  528, 1674,  522, 1634,  538, 1662,  514, 1690,  560, 1676,  524, 1674,  500, 1660,  540, 1662,  536, 616,  520, 574,  506, 624,  568, 606,  498, 612,  524, 568,  512, 660,  532, 608,  496, 1704,  492, 1706,  494, 1682,  516, 1674,  496, 1660,  538, 1660,  514, 1686,  514, 1686,  562, 576,  534, 638,  498, 566,  536, 598,  512, 622,  542, 632,  500, 570,  536, 598,  514, 1684,  566, 568,  540, 1704,  494, 1706,  492, 1708,  490, 1678,  522, 1632,  536, 1640,  556, 600,  572, 1636,  534, 600,  536, 608,  520, 574,  512, 622,  564, 652,  460, 612,  522, 1672,  524, 570,  512, 1688,  564, 576,  532, 1658,  540, 638,  494, 570,  534, 1662,  514, 620,  544, 1654,  542, 638,  498, 1674,  522, 570,  512, 1684,  514, 1684,  514, 664,  498, 1702,  496, 1704,  492, 1668,  530, 1704,  494, 572,  534, 644,  462, 1688,  566, 1710,  486, 572,  540, 610,  522, 568,  514, 624,  562, 1674,  504, 1656,  542, 710,  424, 568,  534, 598,  512, 1694,  562, 684,  424, 1698,  500, 568,  564, 1630,  538, 596,  514, 622,  540, 1662,  536, 638,  494, 1704,  494, 572,  534, 1664,  534, 604,  564, 1678,  492, 1662,  538, 7420,  566};  // UNKNOWN 13B4E4DA

uint16_t mode_auto[213] = {126, 2792,  104, 6924,  104, 1008,  126, 2948,  126, 3292,  126, 1022,  128, 4882,  128, 7988,  6068, 7408,  522, 1674,  524, 1674,  498, 1660,  564, 1632,  514, 1686,  510, 1686,  512, 1686,  512, 1694,  558, 612,  498, 640,  490, 572,  534, 600,  512, 700,  486, 610,  498, 570,  564, 568,  534, 1664,  512, 1684,  514, 1684,  514, 1708,  540, 1634,  568, 1670,  528, 1666,  504, 1698,  496, 644,  488, 614,  520, 568,  512, 622,  512, 570,  594, 638,  492, 570,  566, 566,  512, 622,  568, 1672,  524, 1674,  522, 1674,  498, 1664,  534, 1668,  532, 1704,  490, 1704,  498, 1702,  494, 610,  522, 570,  512, 624,  568, 610,  490, 638,  496, 572,  562, 570,  512, 1666,  532, 668,  520, 1670,  524, 610,  500, 1698,  498, 614,  518, 570,  534, 1662,  534, 598,  564, 1680,  514, 580,  532, 1700,  500, 636,  496, 1698,  500, 1700,  496, 610,  492, 598,  512, 1706,  492, 1686,  510, 668,  524, 1628,  564, 1674,  496, 1704,  494, 1706,  492, 1706,  492, 636,  496, 610,  524, 1632,  566, 568,  514, 666,  524, 608,  494, 636,  496, 612,  520, 1676,  520, 578,  506, 1686,  512, 626,  564, 1630,  566, 612,  490, 634,  500, 1702,  494, 612,  518, 1636,  562, 570,  514, 1684,  512, 666,  496, 1734,  462, 1698,  496, 7418,  512};  // UNKNOWN 6AA37DFA
uint16_t mode_cool[201] = {124, 2368,  6062, 7370,  562, 1638,  536, 1664,  534, 1704,  494, 1664,  532, 1694,  504, 1702,  494, 1700,  500, 1636,  560, 570,  564, 578,  504, 664,  500, 636,  496, 612,  520, 570,  512, 630,  558, 616,  490, 1660,  538, 1698,  502, 1698,  496, 1666,  532, 1704,  496, 1774,  424, 1698,  496, 1660,  538, 568,  534, 582,  588, 606,  494, 638,  496, 610,  524, 568,  532, 606,  560, 576,  534, 674,  460, 1656,  540, 1634,  562, 1676,  524, 1634,  560, 1680,  518, 1632,  568, 1628,  540, 1660,  534, 602,  508, 668,  518, 616,  496, 710,  422, 572,  530, 600,  510, 624,  564, 1678,  516, 618,  492, 1698,  500, 610,  524, 1674,  494, 598,  512, 660,  530, 1636,  560, 684,  422, 1704,  492, 632,  498, 1698,  498, 610,  494, 1660,  536, 1662,  534, 598,  566, 646,  462, 1704,  496, 1704,  490, 642,  490, 1660,  540, 568,  534, 1692,  506, 1700,  498, 1660,  536, 598,  512, 664,  498, 1702,  496, 638,  494, 1702,  496, 610,  524, 568,  512, 626,  566, 1628,  570, 562,  544, 1698,  498, 642,  492, 1700,  496, 568,  536, 598,  510, 1732,  464, 664,  500, 1656,  538, 602,  534, 1700,  494, 574,  558, 1676,  524, 1674,  522, 7442,  516, 17134,  126};  // UNKNOWN 87E91499
uint16_t mode_heat[209] = {128, 5856,  126, 8538,  56, 2280,  128, 1978,  128, 8954,  128, 20418,  5960, 7432,  500, 1698,  500, 1696,  502, 1676,  522, 1678,  514, 1640,  562, 1634,  514, 1684,  512, 1724,  476, 658,  532, 602,  502, 616,  518, 568,  534, 640,  472, 662,  500, 632,  500, 616,  518, 1674,  494, 1664,  534, 1662,  514, 1684,  514, 1722,  476, 1684,  512, 1726,  472, 1724,  526, 608,  504, 608,  522, 570,  548, 622,  476, 660,  498, 632,  502, 610,  522, 572,  512, 660,  472, 1724,  526, 1672,  504, 1696,  500, 1696,  504, 1694,  502, 1696,  502, 1636,  560, 1696,  502, 572,  560, 576,  530, 638,  474, 660,  504, 628,  502, 572,  562, 568,  512, 1726,  472, 660,  526, 1672,  524, 610,  500, 1696,  500, 612,  520, 578,  504, 1686,  514, 658,  532, 1670,  528, 602,  502, 1696,  500, 612,  522, 1676,  524, 1672,  524, 568,  512, 658,  534, 1666,  532, 1668,  526, 606,  502, 1696,  500, 1700,  498, 1696,  498, 614,  492, 1702,  496, 638,  474, 660,  530, 1668,  500, 636,  500, 610,  522, 568,  534, 1662,  512, 660,  524, 1678,  520, 614,  496, 1698,  500, 632,  500, 1676,  520, 570,  536, 596,  514, 1722,  474, 660,  528, 1672,  498, 634,  500, 1694,  502, 610,  494, 1702,  496, 1660,  536, 7460,  526};  // UNKNOWN EFCCB46D

uint16_t turbo[199] = {148, 35956,  6092, 7396,  536, 1676,  528, 1630,  564, 1634,  536, 1664,  514, 1686,  570, 1632,  536, 1668,  532, 1710,  492, 568,  534, 600,  512, 622,  542, 640,  494, 568,  514, 670,  520, 566,  542, 612,  524, 1632,  534, 1664,  514, 1692,  564, 568,  538, 1700,  500, 1674,  526, 1634,  534, 1662,  516, 650,  540, 570,  538, 568,  562, 1636,  516, 622,  570, 604,  500, 612,  526, 570,  510, 1688,  568, 610,  494, 1668,  532, 570,  536, 1664,  514, 1686,  568, 1674,  500, 1776,  422, 638,  500, 1632,  562, 620,  520, 1638,  536, 640,  496, 572,  532, 598,  514, 626,  536, 1778,  426, 608,  522, 1634,  536, 602,  564, 1634,  564, 574,  538, 570,  536, 1662,  514, 632,  554, 1644,  534, 634,  502, 1670,  524, 578,  562, 1640,  556, 1682,  496, 638,  496, 570,  536, 1662,  512, 1692,  560, 618,  496, 1696,  500, 568,  536, 1662,  516, 1684,  570, 1636,  534, 594,  542, 566,  564, 1636,  536, 600,  564, 1636,  542, 642,  492, 570,  534, 598,  566, 1634,  542, 596,  538, 1636,  564, 570,  512, 1688,  512, 662,  502, 638,  496, 1680,  522, 568,  514, 1686,  566, 580,  530, 1702,  498, 568,  538, 1662,  512, 1690,  560, 7378,  536};  // UNKNOWN E779BA6E
uint16_t turbo_[201] = {154, 2060,  126, 20854,  6098, 7408,  526, 1634,  536, 1666,  512, 1690,  560, 1716,  460, 1710,  490, 1680,  520, 1636,  558, 1638,  536, 602,  568, 574,  532, 570,  564, 570,  512, 670,  496, 710,  420, 572,  534, 600,  568, 1678,  492, 1660,  542, 1704,  496, 1660,  538, 1634,  534, 1666,  512, 1694,  562, 1636,  538, 640,  496, 568,  562, 572,  572, 612,  492, 702,  434, 568,  534, 604,  558, 578,  536, 1704,  494, 570,  536, 1664,  514, 664,  498, 1740,  462, 1704,  496, 1634,  564, 1632,  538, 598,  570, 1730,  464, 618,  494, 1702,  498, 570,  514, 700,  488, 620,  490, 570,  536, 1664,  514, 628,  558, 1678,  496, 644,  492, 1634,  568, 568,  514, 628,  534, 1736,  464, 574,  560, 1634,  538, 598,  564, 1640,  536, 598,  538, 1674,  526, 1636,  532, 600,  512, 626,  536, 1660,  538, 1706,  494, 570,  512, 1686,  566, 576,  536, 1738,  460, 1700,  498, 1676,  524, 570,  512, 672,  490, 1702,  500, 568,  568, 1630,  538, 618,  492, 670,  494, 640,  492, 1676,  522, 574,  568, 1638,  554, 582,  532, 1708,  494, 568,  536, 598,  566, 1634,  544, 638,  494, 1676,  524, 570,  514, 1686,  570, 568,  536, 1702,  498, 1634,  564, 7370,  564};  // UNKNOWN AFDE7727

uint16_t swing1[203] = {126, 9582,  126, 4030,  126, 45382,  6064, 7434,  502, 1696,  502, 1700,  498, 1694,  504, 1674,  524, 1674,  524, 1632,  536, 1662,  534, 1664,  514, 660,  526, 610,  502, 580,  552, 570,  532, 598,  512, 660,  528, 608,  502, 638,  494, 1634,  562, 1674,  528, 1670,  498, 1660,  538, 1698,  476, 1722,  474, 1726,  472, 1808,  450, 602,  502, 632,  502, 568,  562, 570,  512, 660,  526, 612,  496, 636,  502, 566,  534, 1664,  534, 1664,  510, 662,  474, 1724,  526, 1672,  500, 1700,  502, 1694,  500, 1698,  502, 572,  560, 570,  512, 1686,  512, 662,  530, 602,  502, 634,  500, 608,  494, 600,  512, 1726,  472, 662,  496, 1698,  500, 1696,  502, 1696,  502, 610,  524, 568,  534, 1662,  512, 660,  522, 1680,  498, 632,  502, 610,  522, 568,  560, 1636,  512, 1686,  514, 642,  544, 608,  502, 1696,  498, 1680,  518, 610,  522, 1634,  566, 568,  512, 1684,  512, 1724,  474, 1724,  476, 662,  498, 632,  504, 1696,  500, 570,  534, 1702,  474, 632,  500, 666,  500, 628,  502, 1698,  500, 570,  564, 1672,  498, 598,  512, 1726,  470, 664,  498, 632,  502, 1696,  502, 570,  534, 1656,  542, 634,  474, 1724,  532, 604,  500, 1698,  502, 1694,  500, 7400,  564};  // UNKNOWN 1396ABD5
uint16_t swing2[197] = {6086, 7412,  526, 1636,  514, 1686,  514, 1694,  564, 1668,  502, 1664,  538, 1674,  526, 1632,  536, 1668,  510, 668,  494, 636,  502, 568,  538, 600,  570, 606,  498, 574,  560, 570,  512, 628,  538, 1700,  500, 1698,  500, 1674,  498, 1662,  536, 1664,  514, 1686,  542, 1698,  504, 1654,  544, 570,  538, 598,  512, 662,  502, 572,  562, 570,  534, 602,  564, 576,  534, 570,  564, 1634,  516, 1686,  512, 670,  494, 1702,  498, 1702,  498, 1676,  494, 1664,  514, 1706,  492, 672,  492, 636,  500, 1674,  496, 600,  512, 668,  496, 636,  496, 572,  514, 668,  524, 1672,  502, 634,  498, 570,  514, 1686,  514, 1726,  526, 612,  498, 610,  524, 1634,  512, 666,  524, 1672,  498, 1706,  494, 612,  524, 572,  510, 1694,  562, 1676,  496, 640,  494, 612,  494, 1664,  510, 1692,  568, 606,  498, 1700,  500, 610,  494, 1668,  510, 1728,  530, 1672,  496, 638,  498, 570,  536, 1662,  514, 664,  498, 1698,  502, 614,  520, 570,  512, 666,  522, 1674,  502, 636,  498, 1634,  534, 604,  510, 1694,  558, 612,  502, 608,  524, 1634,  514, 664,  500, 1700,  500, 634,  500, 1676,  498, 598,  510, 1730,  524, 1674,  498, 7462,  506};  // UNKNOWN DB36A8A9
uint16_t swing3[197] = {6064, 7442,  474, 1726,  526, 1672,  502, 1698,  502, 1700,  500, 1676,  526, 1634,  562, 1634,  536, 1700,  476, 664,  526, 612,  498, 614,  516, 572,  512, 662,  530, 610,  496, 612,  520, 572,  510, 1726,  472, 1728,  528, 1754,  416, 1698,  502, 1698,  500, 1702,  500, 1634,  562, 1634,  536, 638,  476, 660,  502, 634,  498, 574,  530, 640,  476, 660,  502, 634,  502, 570,  532, 1664,  512, 1724,  476, 660,  502, 1698,  500, 1698,  500, 1700,  500, 1656,  526, 1650,  534, 640,  522, 614,  498, 1700,  498, 614,  522, 570,  512, 664,  500, 634,  500, 612,  494, 1662,  536, 636,  474, 1726,  526, 610,  500, 1700,  498, 572,  562, 608,  474, 1724,  472, 664,  500, 1700,  498, 610,  496, 1662,  514, 662,  520, 1678,  498, 1698,  500, 634,  504, 566,  562, 1636,  512, 1724,  476, 660,  502, 1698,  502, 610,  524, 1672,  526, 1634,  534, 1662,  514, 662,  532, 604,  500, 1696,  500, 570,  564, 1632,  538, 638,  472, 748,  414, 634,  502, 1674,  526, 568,  512, 1724,  474, 744,  418, 1698,  498, 640,  492, 574,  512, 1724,  476, 662,  530, 1668,  502, 632,  500, 1674,  526, 570,  534, 1702,  474, 1728,  470, 7492,  472};  // UNKNOWN 35DEB488

uint16_t tvPwr[73] = {4564, 4422,  594, 526,  594, 1644,  594, 1646,  594, 1646,  594, 528,  594, 526,  594, 526,  594, 528,  594, 526,  594, 1646,  594, 1646,  594, 1646,  594, 528,  594, 526,  594, 528,  592, 526,  594, 526,  594, 526,  594, 1646,  592, 1646,  594, 526,  594, 528,  594, 526,  594, 526,  594, 1644,  596, 1644,  596, 528,  592, 528,  594, 1646,  594, 1644,  594, 1644,  594, 1646,  596, 46628,  4540, 4444,  594, 1644,  596};  // SAMSUNG 707030CF
uint16_t mute[73] = {4450, 4534,  616, 504,  618, 1622,  616, 1624,  616, 1624,  616, 506,  616, 504,  616, 504,  616, 506,  614, 506,  614, 1624,  614, 1624,  614, 1626,  614, 506,  614, 506,  614, 506,  614, 506,  612, 1626,  616, 506,  612, 1626,  612, 1626,  612, 508,  612, 510,  610, 510,  610, 510,  610, 510,  612, 1628,  612, 510,  610, 510,  610, 1630,  610, 1628,  610, 1628,  610, 1632,  610, 46594,  4450, 4532,  614, 1624,  614};  // SAMSUNG 7070B04F
uint16_t vol_Up[67] = {4544, 4442,  600, 522,  600, 1640,  600, 1640,  600, 1640,  600, 520,  600, 522,  598, 524,  598, 522,  598, 520,  600, 1640,  600, 1640,  600, 1640,  600, 522,  598, 522,  598, 522,  598, 522,  598, 524,  598, 522,  598, 1640,  600, 522,  600, 1638,  600, 522,  598, 522,  598, 522,  598, 1640,  598, 1640,  600, 522,  598, 1640,  600, 522,  598, 1640,  600, 1642,  598, 1642,  598};  // SAMSUNG 707028D7
uint16_t vol_Down[73] = {4524, 4464,  582, 538,  580, 1658,  580, 1660,  580, 1660,  580, 542,  578, 542,  578, 544,  578, 542,  576, 544,  576, 1664,  576, 1664,  574, 1664,  574, 546,  574, 548,  572, 548,  572, 548,  572, 1666,  574, 548,  572, 1666,  572, 550,  570, 1668,  572, 548,  572, 550,  570, 550,  570, 550,  570, 1668,  570, 550,  570, 1668,  570, 550,  570, 1672,  574, 1664,  568, 1672,  570, 46646,  4540, 4446,  570, 1670,  568};  // SAMSUNG 7070A857
uint16_t menu[73] = {4582, 4404,  606, 516,  638, 1600,  640, 1600,  640, 1600,  640, 482,  640, 482,  640, 482,  640, 480,  640, 482,  640, 1600,  640, 1598,  642, 1600,  640, 482,  638, 482,  640, 482,  640, 480,  640, 1600,  640, 480,  640, 480,  640, 480,  640, 1600,  638, 482,  640, 480,  640, 480,  640, 480,  640, 1600,  640, 1600,  640, 1598,  640, 480,  642, 1598,  640, 1598,  642, 1600,  640, 46584,  4582, 4402,  640, 1598,  640};  // SAMSUNG 70708877
uint16_t source[73] = {4450, 4530,  608, 510,  608, 1630,  608, 1630,  610, 1630,  608, 512,  608, 512,  606, 514,  606, 514,  584, 536,  582, 1656,  582, 1656,  582, 1656,  582, 538,  582, 540,  582, 540,  580, 538,  582, 1658,  580, 1658,  582, 1658,  580, 1660,  580, 540,  580, 540,  578, 542,  580, 540,  580, 542,  578, 542,  578, 542,  578, 542,  578, 1660,  578, 1660,  578, 1662,  578, 1662,  578, 46632,  4454, 4532,  582, 1658,  582};  // SAMSUNG 7070F00F
uint16_t ok[73] = {4576, 4408,  596, 524,  596, 1644,  596, 1640,  598, 1644,  596, 526,  596, 524,  596, 526,  628, 492,  630, 492,  630, 1608,  630, 1608,  632, 1610,  630, 490,  632, 490,  630, 490,  632, 488,  632, 490,  630, 1608,  632, 1608,  632, 490,  632, 488,  632, 490,  630, 1610,  630, 488,  632, 1608,  632, 488,  632, 488,  632, 1608,  632, 1606,  632, 1610,  630, 488,  632, 1610,  632, 46594,  4580, 4406,  632, 1608,  630};  // SAMSUNG 7070629D
uint16_t Exit[73] = {4584, 4396,  646, 476,  644, 1594,  646, 1594,  644, 1594,  644, 476,  644, 476,  644, 478,  642, 476,  644, 476,  644, 1594,  646, 1594,  644, 1594,  644, 478,  644, 478,  642, 478,  644, 478,  640, 1598,  642, 478,  640, 1600,  638, 482,  608, 1630,  610, 1630,  610, 512,  608, 1630,  608, 512,  608, 1630,  610, 512,  608, 1632,  610, 512,  608, 512,  608, 1630,  608, 514,  608, 46608,  4586, 4396,  642, 1596,  638};  // SAMSUNG 7070AD52
uint16_t left[73] = {4430, 4554,  492, 628,  492, 1748,  492, 1746,  494, 1746,  492, 628,  492, 630,  648, 472,  648, 472,  650, 472,  648, 1590,  492, 1746,  492, 1748,  492, 628,  648, 472,  650, 472,  648, 472,  650, 470,  650, 472,  648, 1590,  492, 628,  648, 472,  648, 472,  650, 1590,  492, 628,  646, 1590,  620, 1620,  586, 534,  492, 1746,  586, 1654,  586, 1654,  586, 534,  492, 1748,  586, 46632,  4432, 4552,  620, 1620,  586};  // SAMSUNG 707022DD
uint16_t right[73] = {4614, 4370,  672, 450,  670, 1568,  670, 1568,  672, 1568,  672, 450,  670, 452,  668, 450,  670, 450,  670, 450,  670, 1570,  670, 1568,  670, 1568,  670, 450,  670, 450,  670, 450,  670, 450,  670, 1570,  670, 448,  670, 1570,  670, 450,  670, 450,  670, 450,  670, 1570,  670, 450,  670, 450,  670, 1570,  670, 450,  670, 1568,  670, 1570,  670, 1570,  670, 450,  668, 1572,  670, 46550,  4492, 4490,  672, 1568,  672};  // SAMSUNG 7070A25D
uint16_t up[73] = {4616, 4370,  614, 508,  612, 1626,  614, 1624,  614, 1628,  612, 510,  610, 510,  610, 510,  612, 508,  612, 510,  610, 1626,  612, 1626,  614, 1626,  614, 508,  612, 510,  610, 508,  612, 508,  638, 482,  612, 1626,  648, 474,  646, 474,  646, 474,  648, 472,  646, 1592,  648, 472,  648, 1590,  650, 472,  648, 1590,  650, 1590,  650, 1590,  650, 1588,  650, 470,  648, 1594,  648, 46566,  4618, 4368,  648, 1590,  650};  // SAMSUNG 707042BD
uint16_t down[73] = {4432, 4550,  650, 470,  650, 1588,  650, 1590,  648, 1588,  650, 472,  650, 470,  650, 470,  650, 470,  650, 470,  650, 1588,  614, 1624,  616, 1622,  614, 508,  614, 506,  616, 506,  614, 506,  646, 1592,  614, 1624,  588, 534,  614, 506,  616, 506,  614, 506,  616, 1622,  614, 508,  614, 506,  614, 506,  614, 1624,  586, 1652,  588, 1650,  588, 1652,  588, 532,  614, 1626,  588, 46624,  4434, 4550,  588, 1650,  588};  // SAMSUNG 7070C23D


void wifiConnect() {
  delay(10);
  // We start by connecting to a WiFi network
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.print("WiFi connected - ESP IP address: ");
  Serial.println(WiFi.localIP());
}

/////////////////////////////////////////////////////////RECONNECT
void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Attempt to connect
    
    if (client.connect("ESP_IR")) {
      Serial.println("connected");  
      // Subscribe or resubscribe to a topic
      // You can subscribe to more topics (to control more LEDs in this example)
      client.subscribe("Room/AC");
      client.subscribe("Room/TV");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void callback(String topic, byte* message, unsigned int length) 
{
  Serial.print("Message arrived on topic: ");
  Serial.print(topic);
  Serial.print(". Message: ");
  String messageTemp;
  
  for (int i = 0; i < length; i++) {
    Serial.print((char)message[i]);
    messageTemp += (char)message[i];
  }
  Serial.println();
   
   ///CHANGING AC TEMPERATURES #SirAir---------------------------------------------------------------------------------------------------------
  if(topic=="Room/AC")
  {
      if(messageTemp == "16")
      { 
        Serial.println("temp 16");
        irsend.sendRaw(temp16, 205, 38);  // Send a raw data capture at 38kHz.
      }
      if(messageTemp == "18")
      { 
        Serial.println("temp 18");
        irsend.sendRaw(temp18, 199, 38);  // Send a raw data capture at 38kHz.
      }
      if(messageTemp == "20")
      { 
        Serial.println("temp 20");
        irsend.sendRaw(temp20, 197, 38);  // Send a raw data capture at 38kHz.
      }
      if(messageTemp == "22")
      { 
        Serial.println("temp 22");
        irsend.sendRaw(temp22, 199, 38);  // Send a raw data capture at 38kHz.
      }
      if(messageTemp == "23")
      { 
        Serial.println("temp 23");
        irsend.sendRaw(temp23, 197, 38);  // Send a raw data capture at 38kHz.
      }
      if(messageTemp == "24")
      { 
        Serial.println("temp 24");
        irsend.sendRaw(temp24, 207, 38);  // Send a raw data capture at 38kHz.
      }
      if(messageTemp == "25")
      { 
        Serial.println("temp 25");
        irsend.sendRaw(temp25, 197, 38);  // Send a raw data capture at 38kHz.
      }
      if(messageTemp == "26")
      { 
        Serial.println("temp 26");
        irsend.sendRaw(temp26, 199, 38);  // Send a raw data capture at 38kHz.
      }
      if(messageTemp == "28")
      { 
        Serial.println("temp 28");
        irsend.sendRaw(temp28, 197, 38);  // Send a raw data capture at 38kHz.
      }
      if(messageTemp == "30")
      { 
        Serial.println("temp 30");
        irsend.sendRaw(temp30, 197, 38);  // Send a raw data capture at 38kHz.
      }
      if(messageTemp == "32")
      { 
        Serial.println("temp 32");
        irsend.sendRaw(temp32, 197, 38);  // Send a raw data capture at 38kHz.
      }
      if(messageTemp == "test1") 
      {
        digitalWrite(LED_PIN, HIGH);
      }
      ////////////////////////////////////////////////////NEW MODE AUTO n COOL
      if(messageTemp == "mode_auto")
      {
        Serial.println("AUTO");
        irsend.sendRaw(mode_auto, 213, 38);
      }
      //mode_cool[201]
      if(messageTemp == "mode_cool")
      {
        Serial.println("COOL");
        irsend.sendRaw(mode_cool, 201, 38);
      }
      //swingSp,swing1[203]192////////////////////////////////////////////////////NEW SWING
      if(messageTemp == "swing")
      {
        if(swingSp == 0)
        {
           Serial.println("SWING1");
           irsend.sendRaw(swing1, 203, 38);
          }
        if(swingSp == 1)
        {
          Serial.println("SWING2");
          irsend.sendRaw(swing2, 197, 38);
        }
        if(swingSp == 2)
        {
          Serial.println("SWING3");
          irsend.sendRaw(swing3, 197, 38);
        }
        swingSp++;
        if(swingSp == 3)
        {
          swingSp = 0;
          }
      }
      if(messageTemp == "test0") 
      {
        digitalWrite(LED_PIN, LOW);
      }/////////////****?////////////*****/////////////****//////////////////////
      
            
  }
  //CONTROLS FOR THE TV #SAMSUNG
  if(topic=="Room/TV")
  {
    if(messageTemp == "vol_U")
      {
        //vol_Up
        Serial.println("Volume Up");
        irsend.sendRaw(vol_Up, 67, 38);  // Send a raw data capture at 38kHz.
      }
      //////////////////////////////////////////////////////NEW VOL DOWN
      if(messageTemp == "vol_D")
      {
        Serial.println("Volume Down");
        irsend.sendRaw(vol_Down, 73, 38);  // Send a raw data capture at 38kHz.
      }
      //source[815]////////////////////////////////////////////////////NEW SOURCE
      if(messageTemp == "source")
      {
        //vol_Up
        Serial.println("Source");
        irsend.sendRaw(source, 73, 38);  // Send a raw data capture at 38kHz.
      }
      if(messageTemp == "mute")
      {
        //mute
        Serial.println("mute TV");
        irsend.sendRaw(mute, 73, 38);  // Send a raw data capture at 38kHz.
      }
      if(messageTemp == "tv")
      {
        Serial.println("TV");
        irsend.sendRaw(tvPwr, 73, 38);  // Send a raw data capture at 38kHz.
      }
       //Menu
        if(messageTemp == "menu")
      {
        //vol_Up
        Serial.println("Menu");
        irsend.sendRaw(menu, 73, 38);  // Send a raw data capture at 38kHz.
      }
      //////////////////////////////////////////////////////OK
      if(messageTemp == "ok")
      {
        Serial.println("OK");
        irsend.sendRaw(ok, 73, 38);  // Send a raw data capture at 38kHz.
      }
      //source[815]////////////////////////////////////////////////////Exit
      if(messageTemp == "exit")
      {
        //Exit
        Serial.println("Exit");
        irsend.sendRaw(Exit, 73, 38);  // Send a raw data capture at 38kHz.
      }
      //Left
      if(messageTemp == "left")
      {
        Serial.println("left");
        irsend.sendRaw(left, 73, 38);  // Send a raw data capture at 38kHz.
      }
      //Right
      if(messageTemp == "right")
      {
        Serial.println("Right");
        irsend.sendRaw(right, 73, 38);  // Send a raw data capture at 38kHz.
      }

//Up
      if(messageTemp == "up")
      {
        Serial.println("Up");
        irsend.sendRaw(up, 73, 38);  // Send a raw data capture at 38kHz.
      }
      //Down
      if(messageTemp == "down")
      {
        Serial.println("Down");
        irsend.sendRaw(down, 73, 38);  // Send a raw data capture at 38kHz.
      }

       /////////////////////////////////////////////////Test TV
       if(messageTemp == "test1") 
      {
        digitalWrite(LED_PIN, HIGH);
      }

      if(messageTemp == "test0") 
      {
        digitalWrite(LED_PIN, LOW);
      }
   }
 }

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void setup() {
  pinMode(LED_PIN, OUTPUT);

  for(int x = 0;x<2;x++)
  {
    digitalWrite(LED_PIN, HIGH);
    delay(1000);
    digitalWrite(LED_PIN, LOW);
  }
  
  delay(500);
  //Serial.begin(115200);
  irsend.begin();
  Serial.begin(115200, SERIAL_8N1, SERIAL_TX_ONLY);

  //connect to wifi if not connected already
  if (WiFi.status() != WL_CONNECTED)
    wifiConnect();
  //wifiConnect();
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);
}
void loop() {
  if (!client.connected()) 
  {
    reconnect();
  }
  if(!client.loop())
    client.connect("ESP_IR");

}
